@model SiegeNut.Models.ReviewViewModel
@using PagedList.Mvc;

@{
    ViewBag.Title = "Index";
}

@section Header {
    <h1>Reviews</h1>
}

@section List {
    <script src="~/Content/searchBar.js"></script>
    @if (Model.IsAuthenticated)
    {
        @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-lg btn-create" })
    }
    <div class="row search-row">
        @using (Html.BeginForm("Index", "Reviews", FormMethod.Get, new { name = "search-form" }))
        {
            <div class="col-md-6 hidden-xs">
                <div class="input-group input-group-lg">
                    <span class="input-group-btn">
                        @Html.DropDownListFor(r => r.SearchField, new List<SelectListItem>
    {
                        new SelectListItem() {Text = "Product", Value="Product"},
                        new SelectListItem() {Text = "Rating", Value="Rating" },
                        new SelectListItem() {Text = "Author", Value="Author"}
    }, "Search By", new { @class = "btn" })
                    </span>
                    @Html.TextBoxFor(r => r.SearchString, new { @class = "form-control text-search" })
                    @Html.DropDownListFor(r => r.SearchRating, new List<SelectListItem>
    {
                        new SelectListItem() {Text = "5 Stars", Value="5"},
                        new SelectListItem() {Text = "4-5 Stars", Value="4"},
                        new SelectListItem() {Text = "3-4 Stars", Value="3"},
                        new SelectListItem() {Text = "2-3 Stars", Value="2"},
                        new SelectListItem() {Text = "1-2 Stars", Value="1"},
                        new SelectListItem() {Text = "1/2 Star", Value="0"},
    }, new { @class = "form-control rating-search" })
                    @Html.HiddenFor(r => r.SortBy)
                    @Html.HiddenFor(r => r.SortOrder)
                    <span class="input-group-btn">
                        <input type="submit" class="btn btn-lg" value="Search" />
                    </span>
                </div>
            </div>
        }
        <div class="col-md-6">
            <div class="sort-btns btn-group btn-group-lg pull-right">
                @Html.DropDownListFor(r => r.SortBy, new List<SelectListItem>
    {
                        new SelectListItem() {Text = "Product", Value = Url.Action("Index", "Reviews", new { sortBy = "Product", sortOrder=Model.SortOrder, searchString = Model.SearchString, searchField = Model.SearchField })},
                        new SelectListItem() {Text = "Rating", Value= Url.Action("Index", "Reviews", new { sortBy = "Rating", sortOrder=Model.SortOrder, searchString = Model.SearchString, searchField = Model.SearchField })},
                        new SelectListItem() {Text = "Author", Value= Url.Action("Index", "Reviews", new { sortBy = "Author", sortOrder=Model.SortOrder, searchString = Model.SearchString, searchField = Model.SearchField })},
                        new SelectListItem() {Text = "Date", Value= Url.Action("Index", "Reviews", new { sortBy = "Date", sortOrder=Model.SortOrder, searchString = Model.SearchString, searchField = Model.SearchField })}
    }, "Sort By", new { @class = "btn" })
                @Html.DropDownListFor(r => r.SortOrder, new List<SelectListItem>
    {
                        new SelectListItem() {Text = "Ascending", Value = Url.Action("Index", "Reviews", new { sortOrder = "Ascending", sortBy=Model.SortBy, searchString = Model.SearchString, searchField = Model.SearchField })},
                        new SelectListItem() {Text = "Descending", Value= Url.Action("Index", "Reviews", new { sortOrder = "Descending", sortBy=Model.SortBy, searchString = Model.SearchString, searchField = Model.SearchField })}
    }, "Order", new { @class = "btn" })
                <script type="text/javascript">
                    $(document).ready(function () {
                        $('.sort-btns select.btn[name="SortBy"]').children().each(function () {
                            if ($(this).text() == "@Model.SortBy") { $(this).attr('selected', 'selected') };
                        });
                        $('.sort-btns select.btn[name="SortOrder"]').children().each(function () {
                            if ($(this).text() == "@Model.SortOrder") { $(this).attr('selected', 'selected') };
                        });
                    });
                </script>
            </div>
        </div>
    </div>
    @foreach (var item in Model.Reviews)
    {
        <div class="row item">
            @Html.Partial("_ReviewBody", item)
            <div class="col-md-12">
                @if (ViewBag.CurrentSearch != item.Author.UserName)
                {
                    @Html.ActionLink("Reviews by this user", "Index", "Reviews", new { searchString = item.Author.UserName, searchField = "Author" }, new { @class = "btn" })
                }
                @if (ViewBag.CurrentUser == item.AuthorID || Model.IsAdmin)
                {
                    @Html.ActionLink("Edit", "Edit", new { id = item.ID }, new { @class = "btn" })
                }
                @if (ViewBag.CurrentUser == item.AuthorID || Model.IsAdmin)
                {
                    @Html.ActionLink("Delete", "Delete", new { id = item.ID }, new { @class = "btn" })
                }
            </div>
        </div>
    }
    <div class="page-box text-right">
        <p class="text-center">Page @(Model.Reviews.PageCount < Model.Reviews.PageNumber ? 0 : Model.Reviews.PageNumber) of @Model.Reviews.PageCount</p>
        @Html.PagedListPager(Model.Reviews, page => Url.Action("Index",
    new { page, sortBy = ViewBag.CurrentSort, sortOrder = ViewBag.CurrentOrder, currentField = ViewBag.CurrentField, currentSearch = ViewBag.CurrentSearch }))
    </div>
}